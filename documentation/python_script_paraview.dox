/**
 * \page page_python_script_for_paraview How to use Python scripts within Paraview?
 * \author Najib Alia <alia@wias-berlin.de>
 * \date 2018/10/17
 *  \brief This page describes a Python script to save data from Paraview.
 *
 * \tableofcontents
 * 
 //-------------------------------------------------------------------------------------
 * \section preface Preface
 * Scripting with Paraview is particularly relevant for a large amount of simulations outputs, e.g.,
 * repeated time-dependent problems with varying mesh sizes, time steps, solvers, parameters, etc... .
 * This page explains how to run Python scripts in Paraview. Although it focuses on a 
 * particular case, it contains helpful commands to make the data analysis with Paraview easier.
 * 
 * The script is still very basic. Any contribution to improve this page is welcome!
 *
 //-------------------------------------------------------------------------------------
 *
 * \section sec_introduction Introduction
 * The different output files obtained from ParMooN simulations can be analyzed
 * using the software Paraview. Examples of the formats generated by ParMooN and 
 * readable in Paraview are .case, .vtk, and .pvtu files. Using Python scripts, it is possible 
 * to use one or several features from Paraview iteratively on these files and extract data.
 * This note explains step by step an example script and is structured as follows:
 * 
 * 1) How to run a Python script in Paraview
 *
 * 2) How to learn new commands by yourself in Paraview --> VERY IMPORTANT!
 *
 * 3) Some imports commands
 *
 * 4) How to load a list of .pvtu files
 *
 * 5) How to write "PlotOverLine" data into .csv files
 *
 * 6) How to reset a Paraview session with Python scripts
 *
 * ...and a final note about the script.
 * 
 * \section sec_run_script_paraview 1) How to run a Python script in Paraview
 * Open paraview:
 * \code
 * paraview
 * \endcode
 * In the Menu Bar, choose **Tools >  Python Shell**. Use **Run Script** to load a Python script. 
 * The other options are **Reset** to reset the Python session (i.e., clear the variables created 
 * by the Script you have run), and **Clear** to clean the window.
 * 
 * Although, this is quite manual, it can be a good starting point when you construct your script.
 * You can indeed check the results of your script in the Paraview window and correct it.
 *
 *
 * **If you want to run the Python script directly from the command line, use**
 * \code
 * pvpython my_script.py
 * \endcode
 *       
 *
 * \section sec_preliminary 2) How to learn the commands by yourself
 *
 * **IMPORTANT TO READ:** This note uses commands which are specific to:
 *
 * - .pvtu files
 *
 * - PlotOverLine source
 *
 * **You will certainly need other commands, for example, to deal with .vtk or .case files, or 
 * to make other data analysis and extraction (Calculator, Streamlines, Screenshots ...). Here are some ways to find
 * out the commands you need by yourself.**
 *
 * 1) Open Paraview and in the Menu Bar, open **Tools > Start trace**. Set the properties as you want.
 *
 * 2) Do the tasks that you want manually (open vtk, create a plot, a table, and export data manually 
 * "File > Save Data" or "Save Screenshot")
 *
 * 3) Then, **Tools > Stop trace**. A "Script Editor" window should open automatically with the commands 
 * corresponding to the tasks you have done manually....and that's it!
 * 
 * 4) You can also do **File > Save State**, and choose the file type **Python state file (*.py)**. Then, 
 * open the .py file generated in a text editor to see commands related to the Paraview "State" (pipeline, 
 * views, ...). 
 *
 * 5) It can happen that, for some reason, you can't find a command using these procedures. 
 * In this case, check the documentation of Paraview or in the internet.
 *
 * \section sec_import_commands 3) Some import commands
 * 
 * In order to use Python scripts within Paraview, one needs to import the "simple" module. 
 * Other modules, like os and system, are also loaded for later use.
 *
 * \snippet scripts/save_paraview_data.py block0
 * 
 * \section sec_load_files 4) How to load .pvtu files
 *
 * In this note, the output come from time-dependent MPI simulations and are stored as .pvtu. 
 * The command to read .pvtu files is XMLPartitionedUnstructuredGridReader:
 *
 * \snippet scripts/save_paraview_data.py block2
 *
 * Here, the variable File is a list of all .pvtu filenames belonging to one simulation. 
 * It can be one (stationary problem), or several files (time-dependent). 
 *
 * \note **You have to adapt this command for other file formats, like .vtk and .case!**
 *         They are something like: 
 *          \code
 *          vtkresult = LegacyVTKReader(FileNames= File)
 *          caseresult = EnSightReader(CaseFileName= File)
 *          \endcode
 *
 * In the following piece of code, we construct the list File for time-dependent results. 
 * For example, we assume that we have 
 * 3 different simulations m1, m2, and m3 (for example 3 meshes). For some reason, they have different 
 * number of time steps, and therefore, different number of output files. 
 * Then, the list of files for the first simulation m1 is given by:
 *
 * \snippet scripts/save_paraview_data.py block1
 *
 * These pieces of code can be easily embedded in a "For Loop" over the 3 simulations m1, m2, and m3. Of course, you 
 * have to put this second block of code above the first one.
 *
 * \section sec_extract_plotoverline 5) How to write "PlotOverLine" data into .csv files
 *
 * The command to get the number of time steps is "yourvariablename.TimestepValues". The following lines 
 * are used to set up the options of "plot over line" needed in my specific case. **Change it according 
 * to your need, see section 2 again to learn by yourself the commands you need!**
 *
 * \snippet scripts/save_paraview_data.py block3
 *
 * Now, the "PlotOverLine" has been created, but the data has not been exported yet. In the specific case of
 * "PlotOverLine", the data exportation is done through a "Writer" which saves the data in a .csv table.
 * Before going to this, it is a good idea to prepare a separate folder to save these data. Here is an example:
 *
 * \snippet scripts/save_paraview_data.py block4
 *
 * The function "make_directory" is defined like this:
 *
 * \snippet scripts/save_paraview_data.py block5
 *
 * Now, we can properly extract the data. In my case, I create the Writer and set the property 
 * "WriteAllTimeSteps" to 1.This writes the data in as much .csv files as there are time steps.
 * Here, the variable "source" is the 
 * plotOverLine, see Line 8 above. The .csv can then be processed by other means, e.g., Matlab or Python itself.
 * 
 * \snippet scripts/save_paraview_data.py block6
 *
 * **Again, change these lines according to your need!** **If you want for example to generate** 
 * **Screenshots with specific options at specific time steps, this can be done here,** 
 * **instead of this piece of code!**
 *
 * \section sec_reset_paraview_session 6) How to reset a Paraview session with Python scripts
 *
 * Finally, it is a good idea to free memory, especially if you have a large amount of data 
 * (hundreds of time steps, fine meshes, tens of simulations). The Delete() command concerns Paraview objects
 * while del is for Python variables.
 *
 * \snippet scripts/save_paraview_data.py block7
 *
 * Sometimes, you will need to completely reset a Paraview session, i.e., clear everything you have loaded.
 * I found this script to completely clean the pipeline and restart the session.
 *
 * \snippet scripts/save_paraview_data.py block8
 *
 * Then, don't forget to call ResetSession() when needed, for example at the beginning of a For Loop.
 *
 *
 * \note **The script explained in this page can be found in /ParMooN/documentation/scripts.**
 * **However, it is not ready for use. It is rather a collection of blocks used for explanation purposes.**
 * **It is anyway a good starting point for your own script!**
 *
 */
