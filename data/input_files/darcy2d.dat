# The name of the database. This is usually not of any importance
[ ParMooN database for Darcy2D ]

## This is the file where all output of ParMooN is (usually) written 
## to. In general ParMooN produces text output on the console as well 
## as in this file. For this to properly work, you should call 
## `Output::set_outfile(db["outfile"]);` in your main program. 
outfile: default_parmoon_outfile.out

## This is a file describing the boundary of the computational 
## domain. You probably want to adjust this to be the path to some file 
## which typically has the extension 'PRM'. See the documentation 
## for GEO and PRM files. 
boundary_file: Default_UnitSquare

## This files describes the computational mesh. You probably want to 
## adjust this to be the path to some file which typically has the 
## extension 'GEO' or 'xGEO'. See the documentation for GEO and PRM 
## files. 
geo_file: UnitSquare   { TwoTriangles, UnitSquare }

## number of uniform refinements of the initial mesh
refinement_n_initial_steps: 5

## Determine which kind of problem you want to solve. A value of 0 means 
## not set. Other values have the following meanings: 1: stationary 
## convection-diffusion, 2: time-dependent 
## convection-diffusion, 3: stationary Stokes, 4: time-dependent 
## Stokes, 5: stationary Navier-Stokes, 6: time-dependent 
## Navier-Stokes. 
problem_type: 0   [ 0, 6 ]

## Set the verbosity of ParMooN. The higher the number, the more will 
## output you will get. Such output will be written to console and the 
## 'outfile'. 
verbosity: 1   [ 1, 5 ]

## Choose which example to run. Note that depending on the type of 
## problem you want to solve, different values are meaningful here. 
## See the class 'Example' and its derived classes.
## 0 -- with known sin and cos solution (e.g. to study convergence rates)
## 1 -- simple benchmark with known solution (linear velocity, zero pressure)
## 2 -- simple benchmark with known solution (cubic velocity, quartic pressure)
## 3 -- obstacle with ten times lower conductivity. 
##      Set P0 for various obstacles, see Examples/Darcy_2D/Obstacle.h.
## 4 -- 5-spot problem, see Arif Masud, Thomas J.R. Hughes: "A stabilized mixed 
##      finite element method for Darcy flow", chapter 4.2
example: 0

## This parameter can control, whether an output methodof a system 
## class will produce VTK output or not. 
output_write_vtk: false   { true, false }

## Draw a postscript file of the domain. This only works in two space 
## dimensions. Usually this is used in the main program. 
output_write_ps: false   { true, false }

## Do or do not compute errors after computing a solution. This makes 
## much sense if an analytical solution is known. If not then it is 
## often simply set to zero and computing errors then means computing 
## norms, e.g. the L^2-norm of the solution. 
output_compute_errors: true   { true, false }

## This directory is where the VTK output is written. This directory 
## will be created, if it does not exist already. Files in this 
## directory will be overwritten without any warning. 
output_directory: .

## This string is prepended to most files written by ParMooN. 
## Especially this includes vtk-files 
output_basename: parmoon

## Determine which kind of solver should be used. This can be an 
## iterative or a direct solver 
solver_type: direct   { direct, iterative }

## Determine which type of direct solver should be used. All of them 
## are implemented in external libraries. 
direct_solver_type: umfpack   { mumps, pardiso, umfpack }

## Determine which type of iterative solver should be used.
iterative_solver_type: fgmres   { bi_cgstab, cg, cgs, fgmres, jacobi, left_gmres, richardson, right_gmres, sor, ssor }

## Maximum number of iterations of the iterative solver. This is used 
## as a stopping criterion of the iteration. 
max_n_iterations: 100   { 0, 1, 2, 3, 4, 5, 10, 100, 1000, 10000, 100000 }

## Minimum number of iterations of the iterative solver. This 
## enforces iterations even of other stopping criteria are already 
## satisfied. 
min_n_iterations: 0   { 0, 1, 2, 3, 4, 5, 10 }

## The desired accuracy for the residual using an iterative solver. 
## This is used as a stopping criterion of the iteration. 
residual_tolerance: 1e-08   [ 0, 100 ]

## The factor by which the residual should be reduced. This is used as a 
## stopping criterion. Whenever the residual is smaller than the 
## product of the initial residual and this parameter, the iteration 
## is terminated. A value of 0.0 therefore effectively disables this 
## stopping criterion. 
residual_reduction: 0   [ 0, 1 ]

## The number of gmres iterations until a restart is done. Larger 
## numbers lead to more memory consumption, smaller numbers 
## typically mean more iterations. 
gmres_restart: 20   [ 1, 1000 ]

## Determine the used preconditioner. Note that some of these are 
## specific for some problem types. 
preconditioner: no_preconditioner   { least_squares_commutator, least_squares_commutator_boundary, no_preconditioner, semi_implicit_method_for_pressure_linked_equations }

## During the application of a Saddle_point_preconditioner one has 
## to solve a system involving only the velocity part of the matrix. 
## Set this parameter to true if you want to solve this with a direct 
## solver, otherwise some iterative scheme is used. Check out the 
## class Saddle_point_preconditioner. 
saddle_point_preconditioner_direct_velocity_solve: true   { true, false }

## The damping in an iteration. A value of 1.0 means no damping while 
## 0.0 would mean no progress. In general smaller values make 
## iterations slower. This can still be necessary in cases where the 
## iterations does not converge at all with larger values. 
damping_factor: 1   [ 0, 1 ]


# Raviart-Thomas space RT_k
# use one of the four pairs for (VELOCITY_SPACE, PRESSURE_SPACE)
# currently there is no run time check that the given combination is inf-sup stable
# (1000,  0)     RT_0
# (1001,-11)     RT_1
# (1002,-12)     RT_2
# (1003,-13)     RT_3
# BDM k
# (1011,  0 )    BDM_1
# (1012,-110)    BDM_2
# (1013,-120)    BDM_3
VELOCITY_SPACE:  1001
PRESSURE_SPACE:  -4711

---------------------------------------------------------------------
# INPUT_QUAD_RULE is used to determine the quadrature formula during 
# the computation of errors. Set it to 99 (or so) to get the highest 
# order quadrature formula available
INPUT_QUAD_RULE: 99

----------------------------------------------------------------------
# Permeability:  (1/sigma) u - nabla p = 0
SIGMA_PERM:  1
