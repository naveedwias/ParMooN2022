# option file to use with astyle
# call it with --option=astyle_preference
# command line options override the content of this file 

# If activated:
# No backup file suffix, i.e. don't back up the files
# If astyle screws up, we'll rely on git.
--suffix=none

# If activated:
# Format all file in the directory (use with wildcards)
--recursive

# uses broken brackets
--style=allman

# Indent using 2 spaces per indent
--indent=spaces=2

# Comments starting in the first column of text are not special.
--indent-col1-comments

# Indent 'class' and 'struct' blocks so that the entire block is indented. The struct
# blocks are indented only if an access modifier, 'public:', 'protected:' or 'private:', is 
# declared somewhere in the struct. This option is effective for C++ files only. 
--indent-classes

# Indent 'switch' blocks so that the 'case X:' statements are indented in the switch block. 
# The entire case block is indented
--indent-switches

# Add extra indentation to namespace blocks.
--indent-namespaces

# Add extra indentation to labels so they appear 1 indent less than the current 
# indentation, rather than being flushed to the left (the default). 
--indent-labels

# Don't limit the size of an in-statement indent.
# Example:
# reallyLongFunctionName(foo,
# --don't limit this---->bar);
max-instatement-indent=80

# Insert space padding around operators.
--pad-oper

# Insert space padding around parenthesis on the inside only.
#--pad-paren-in

# Insert space padding between a header (e.g. 'if', 'for', 'while'...) 
# and the following parenthesis.
#--pad-header

# Takes away all padding around parenthesis apart the one required from the previous padding
--unpad-paren

# Add brackets to unbracketed one line conditional statements
# (e.g. 'if', 'for', 'while'...). The statement must be on a single line.
# The brackets will be added according to the currently requested predefined 
# style or bracket type. 
--add-brackets

# Converts tabs into spaces in the non-indentation part of the line.
--convert-tabs

# The option max‑code‑length will break a line if the code exceeds 80 characters
--max-code-length=80

# The option break‑after‑logical will cause the logical conditionals to be placed last on 
# the previous line. This option has no effect without max‑code‑length.
#--break-after-logical

# Preserve the original file's date and time modified. The time modified will be changed a 
# few micro seconds to force the changed files to compile. This option is not effective if 
# redirection is used to rename the input file.
--preserve-date

# Attach a pointer or reference operator (*, &, or ^) to the variable type (left) 
--align-pointer=type

# Fill empty lines with the white space of the previous line. 
--fill-empty-lines

# Add one line brackets to unbracketed one line conditional statements (e.g. 
# 'if', 'for', 'while'...). The statement must be on a single line. The option 
# implies --keep-one-line-blocks and will not break the one line blocks. 
--add-one-line-brackets

# Don't break one-line blocks.
--keep-one-line-blocks
